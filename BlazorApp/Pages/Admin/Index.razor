@page "/admin/"
@using BlazorApp.Components;
@using BlazorApp.Models;
@inject IModalService modal
@inject HttpClient client

<button @onclick="@ShowModal" class="btn btn-primary">Tilføj produkt</button>

<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>Billede</th>
            <th>Id</th>
            <th>Navn</th>
            <th>Fabrikat</th>
            <th>Kategori</th>
            <th>Pris</th>
            <th>Aktiv</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @if (Products != null)
        {
            @foreach (var product in Products.Items)
            {
                <tr>
                    <td><img src="@(product.Image != null ? $"data:image/png;base64, {product.Image}" : "/Images/image-not-found-icon.svg")" height="50" class="card-img" /></td>
                    <td>@product.ProductId</td>
                    <td>@product.Name</td>
                    <td>@product.Manufacturer?.Name</td>
                    <td>@product.Category?.Name</td>
                    <td>@product.Price?.ToString("C2")</td>
                    <td>@(!product.Disabled)</td>
                    <td>
                        <div class="d-flex justify-content-center gap-3">
                            <input type="hidden" value="@product.ProductId" />
                            <a class="btn btn-warning"><i class="bi bi-pencil-square"></i></a>
                            <button class="btn btn-danger"><i class="bi bi-trash-fill"></i></button>
                        </div>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>
<Pagination TotalPages="Products.PageCount" CurrentPage="Products.CurrentPage" SelectedPage="SelectedPage"></Pagination>

@code {
    private Page<ProductModel> Products = new();
    private Parameters Parameters = new();

    protected async override Task OnInitializedAsync()
    {
        await GetProducts();
    }

    private async Task SelectedPage(int page)
    {
        Parameters.CurrentPage = page;
        await GetProducts();
    }

    private async Task GetProducts()
    {
        Products = (await client.GetFromJsonAsync<Page<ProductModel>>($"api/products?page={Parameters.CurrentPage}")) ?? new Page<ProductModel>();
    }

    private async Task ShowModal()
    {
        var modalReference = modal.Show<AddProduct>("Tilføj produkt");
        var result = await modalReference.Result;

        if (result.Confirmed)
        {
            await OnInitializedAsync();
        }
    }
}
